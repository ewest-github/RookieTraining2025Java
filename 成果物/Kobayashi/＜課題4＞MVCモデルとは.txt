プログラムを役割ごとにモデル、ビュー、コントローラーに分けて管理する設計のこと、問題が起きても分けて管理しているので他の役割への影響が少ない。作業の分担、コードの修正がしやすく効率よく作業できる。

・Model
データベースとデータをやり取りしてデータの更新などを行う。データはControllerに送る。
・View(JSP)
表示を行う。ユーザーが見る画面を作る。リクエストデータをControllerに送りレスポンスデータを画面に表示する。
・Controller(サーブレット)
ModelとViewの制御を行う。Modelにデータ処理の指示を出したりViewに画面表示の指示をだす。

①MVCで開発の効率化と保守性の反面、悪い点を追記お願いします。
・処理速度が遅くなる。コードの分割を上手く行う必要がある

②自分の言葉で下記の内容をMVCのどこが担うかを説明してみてください。
・レストランでの食事を想像してください。
・あなたが入店した後、ウェイターは注文を受けるためにあなたのテーブルに行きます。彼らは、最初あなたが何を食べたいか知りません。彼らの義務はあなた要求を書き留めることです。
(ユーザーからのリクエストをコントローラーが受け取る)
・その後、ウェイターは注文されたメニューとデーブル番号を沿えてシェフに伝えます。
(コントローラーがモデルに処理を指示する)
・キッチンではシェフが食事を用意します。具体的には、野菜サンドイッチを注文すると、シェフはパン、ジャガイモ、トウガラシ、タマネギなどのコンポーネントを使用します。
(モデルが処理結果をコントローラーに渡す)
・調理が終わりました、その料理はあなたに届けるためにウェイターに渡されます。
(ビューが画面表示をコントローラーに渡す)
・現在、ウェイターはあなたが必要としている食べ物とその準備方法を理解しています。

登場人物
・あなた
ブラウザ/ユーザー。ページに情報の入力を行う。
・調理
モデル。ウェイターから指示をもらい、要求通りに料理をしてウェイターに渡す。
・運ばれる料理
ビュー(JSP)。ユーザーが見る画面を表示(お客さんが食べる料理)。
・ウェイター（注文を受ける人）
コントローラー(サーブレット)。ユーザーのリクエストを受け取る。